package {	import jp.progression.casts.*;	import jp.progression.commands.display.*;	import jp.progression.commands.lists.*;	import jp.progression.commands.managers.*;	import jp.progression.commands.media.*;	import jp.progression.commands.net.*;	import jp.progression.commands.tweens.*;	import jp.progression.commands.*;	import jp.progression.data.*;	import jp.progression.events.*;	import jp.progression.executors.*;	import jp.progression.scenes.*;	import jp.progression.loader.*;	import jp.progression.data.*;	import ui.*;	import ui.bg.*;	import _scene.*;	import _sprite.*;	import flash.net.URLRequest;	import jp.nium.utils.XMLUtil;	import flash.display.Sprite;		import flash.utils.Timer;    import flash.events.TimerEvent;		import flash.events.*;			import fl.transitions.*;    import fl.motion.easing.*;    import flash.utils.*;    import flash.trace.Trace;	/**	 * ...	 * @author ...	 */	public class IndexScene extends SceneObject {				/**		 * 新しい IndexScene インスタンスを作成します。		 */		 		 ////////////Scene		 private var _aboutUsScene:aboutUsScene;		 private var _worksScene:worksScene;		 private var _cantactScene:cantactScene;		 private var _linkScene:linkScene;		 private var _recruiteScene:recruiteScene;		 private var _downloadScene:downloadScene;		 		 /////////////		 public var _arr_Btn_Thumbnail:Array;		 public var _arr_imageUrl:Array;		 private var Retsu:uint;		 private var bg_Square:Sprite;		 private var countTimer:uint = 1;		 //public var timer:Timer = new Timer(3000, 予定回数（なし無限） ); // 1000ミリ秒 = １秒		 		 ////////////写真tween		 private var twn1:Tween;         private var twn2:Tween;         private var twn_arr:Array;		 ////////////btn		 public var _logo_btn:logo_btn;		 private var _side_bg:side_bg;		 public var _up_bg:up_bg;		 private var _footer_btn:footer_btn;		 		 ////////Event.RESIZE用		 		 private var _re_footer_btn:re_footer_btn;		 		 private var _info_text:info_text;		 private var bg_image:bg_Image_Sprite;		 		 		 ///////////コンテンツのシーンの数		 private var contents_num:uint;		 public var xml_nodeNum:uint;		 		 //////ループリスト		 private var lpList: LoopList;		 						 		public function IndexScene() {			// シーンタイトルを設定します。			title = "TOP _ LuckyPonies Web _ Kato & Kato Design.";									_aboutUsScene = new aboutUsScene();            _aboutUsScene.name = "aboutUs";            addScene( _aboutUsScene );						_worksScene = new worksScene();            _worksScene.name = "works";            addScene( _worksScene );									_cantactScene = new cantactScene();            _cantactScene.name = "cantact";            addScene( _cantactScene );						_linkScene = new linkScene();            _linkScene.name = "link";            addScene( _linkScene );						_recruiteScene = new recruiteScene();            _recruiteScene.name = "recruite";            addScene( _recruiteScene );						_downloadScene = new downloadScene();            _downloadScene.name = "download";            addScene( _downloadScene );						//bg_Image_Sprite;			contents_num = numScenes; 																	}				/**		 * シーン移動時に目的地がシーンオブジェクト自身もしくは子階層だった場合に、階層が変更された直後に送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atSceneLoad():void {						bg_Square = new Sprite();			bg_Square.scaleX = CastDocument.stage.stageWidth/800;			bg_Square.scaleY = CastDocument.stage.stageWidth/800;						_logo_btn = new logo_btn();						_side_bg = new side_bg();			_side_bg.y = _logo_btn.height;						_up_bg = new up_bg();			_up_bg.x= _logo_btn.width;			//_up_bg.width = CastDocument.stage.stageWidth -_logo_btn.width						_footer_btn = new footer_btn();			_footer_btn.y =  CastDocument.stage.stageHeight-_footer_btn.height;						_info_text = new info_text();			_info_text.x = 30;			_info_text.y = -800;						bg_Square.graphics.drawRect(0, 0, 0, 0);			Retsu = 5;						//////////Event.RESIZE用															_re_footer_btn = new re_footer_btn()			_re_footer_btn.width = 3000;			_re_footer_btn.x = _footer_btn.width;						stage.addEventListener(Event.RESIZE, function(evt:Event):void {            						if(CastDocument.stage.stageWidth>=800){																bg_Square.scaleX = CastDocument.stage.stageWidth/800;			bg_Square.scaleY = CastDocument.stage.stageWidth/800;			            }			if(CastDocument.stage.stageHeight>=600){				_footer_btn.y = CastDocument.stage.stageHeight-_footer_btn.height;								}			});															addCommand(					   //シーン作成用のXMLファイルを読み込み					   new AddChild(container, bg_Square),				new LoadURL(new URLRequest("xml/bg_pct01.xml")),				////////////////				////////////////HTML用				function():void {										//シーンの作成（コマンドクラスのlatestDataプロパティで、直近の読み込みデータを参照可能）					addSceneFromXML(new XML(this.latestData));										//コマンド登録用のパラレルリスト					var pList:ParallelList = new ParallelList();					//削除用の参照を配列に入れておく					_arr_Btn_Thumbnail = new Array();					_arr_imageUrl = new Array();										var myxml:XML = XML(this.latestData);					xml_nodeNum = myxml.child("scene").length();					//trace("ノードの数"+xml_nodeNum);										//ボタンの作成					for ( var i:int = contents_num; i < numScenes; i++ ) {						//シーン固有の値をsceneinfo.dataより取得(シーンオブジェクトのscenesプロパティで子シーンの参照の配列を取得可能)						var xmlData:XMLList = new XMLList( scenes[i].dataHolder.data );						//データ形式がXMLListなので、XMLUtilを利用して変換						var obj:Object = jp.nium.utils.XMLUtil.xmlToObject( xmlData );						//画像をボタンとして作成（画像クリックで戻る様にする為）、また、ボタンはスプライトに内包する						//var btn_Thumbnail:Btn_Thumbnail_Sprite = new Btn_Thumbnail_Sprite();						bg_image = new bg_Image_Sprite();						//削除時の為にボタンのインスタンスの参照を保持						_arr_Btn_Thumbnail.push(bg_image);																								//setterへ値をセットする						bg_image.sceneId = scenes[i].sceneId;						bg_image.imageUrl = obj.imageUrl;						bg_image.nodeNum = numScenes;						_arr_imageUrl.push(obj.imageUrl);						//bg_image.x= 10*i						//bg_image.alpha = 0;						//bg_image.timer.start();						//位置の決定						//btn_Thumbnail.x = ( 130 * (i % Retsu ) ) + 50;						//btn_Thumbnail.y = (Math.floor(i / Retsu) * 80) + 30;																		pList.addCommand(													new AddChild(bg_Square, bg_image ),							new AddChild(container, _logo_btn),							new AddChild(container, _side_bg),							new AddChild(container, _footer_btn),							new AddChild(_footer_btn, _re_footer_btn)													);					}					insertCommand(pList);					///////////////////////////										twn_arr =new Array();		            twn_arr[0]=twn1;                    twn_arr[1]=twn2;							}        );			        }						/**		 * シーンオブジェクト自身が目的地だった場合に、到達した瞬間に送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atSceneInit():void {			var num:uint = 1;			var seri:SerialList;			var seri2:SerialList;												lpList = new LoopList(0,null,	          function():void {		                //  trace("Beta版1.1です！")						},							   							   function():void{								   								   for ( var f:int = 0; f < xml_nodeNum; f++ ) {								   seri = new SerialList(); // 動的にSerialListのインスタンスを生成                                   seri.addCommand ( new DoTweener( _arr_Btn_Thumbnail[f] , {  alpha:0 ,y:1000,  time:.2 , transition:"easeOutCirc" } ) );//Tweenerを設定								   								   seri.execute(); //実行                                   //this.listen( seri, ExecuteEvent.EXECUTE_COMPLETE ); // seriの処理が終わるまで待つ								   }								   },								   								   								   function():void{								   num++;		                  						           if(num>=xml_nodeNum){					               num=0;					               }								   seri2 = new SerialList(); // 動的にSerialListのインスタンスを生成                                   seri2.addCommand (new DoTweener( _arr_Btn_Thumbnail[num] , {  alpha:1 ,y:0, time:.2 , transition:"easeOutCirc" } ) );//Tweenerを設定                                   seri2.addCommand (new Trace(num));//Tweenerを設定								   seri2.execute(); //実行                                   //this.listen( seri, ExecuteEvent.EXECUTE_COMPLETE ); // seriの処理が終わるまで待つ								   },								   new Wait(2)								   							                 );         lpList.execute();		 					addCommand(					   [											   new AddChild(container, _up_bg),					   new AddChild(_up_bg, _info_text),					   new DoTweener( _info_text , { alpha:1 , y:0 , time:.1 , transition:"easeOutCirc" } )					  						]			          );		}				/**		 * シーンオブジェクト自身が出発地だった場合に、移動を開始した瞬間に送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atSceneGoto():void {			lpList.stop();						var pList2:ParallelList = new ParallelList();			addCommand(					   					   new RemoveChild(container,_up_bg),					   new RemoveChild(_up_bg,_info_text),					   					   [new DoTweener( _info_text , {  alpha:0 ,y:-300 , time:.1 , transition:"easeOutCirc" } ),											   function():void {						   						  for ( var m:int = 0; m < xml_nodeNum; m++ ) {						  //pList2.addCommand(						  addCommand(   								   new DoTweener( _arr_Btn_Thumbnail[m] , {  alpha:0 ,y:0, time:.1 , transition:"easeOutCirc" } ) 								   );						  }						   						}]				 			          );					}				/**		 * シーン移動時に目的地がシーンオブジェクト自身もしくは親階層だった場合に、階層が変更される直前に送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atSceneUnload():void {			addCommand(					 					//removeAllScenes			);		}	}}