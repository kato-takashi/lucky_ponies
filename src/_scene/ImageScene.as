package _scene{	import jp.progression.casts.*;	import jp.progression.commands.display.*;	import jp.progression.commands.lists.*;	import jp.progression.commands.managers.*;	import jp.progression.commands.media.*;	import jp.progression.commands.net.*;	import jp.progression.commands.tweens.*;	import jp.progression.commands.*;	import jp.progression.data.*;	import jp.progression.events.*;	import jp.progression.executors.*;	import jp.progression.scenes.*;	import jp.progression.data.*;	import ui.*;	import flash.net.URLRequest;	import jp.nium.utils.XMLUtil;	import flash.text.*;	import flash.display.*;	import _sprite.*;	import ui.bg.*;		import flash.utils.Timer;    import flash.events.TimerEvent;			/**	 * ...	 * @author ...	 */	public class ImageScene extends SceneObject {				/**		 * 新しい IndexScene インスタンスを作成します。		 */		private var _btn_Image:Btn_Image_Sprite;		private var _close_btn:close_btn;		private var _next_Btn:next_btn;		private var _prev_Btn:prev_btn;				private var Next_Num:uint;		private var Prev_Num:uint;		private var nodeNum:uint;		private var txtField:TextField = new TextField();		private var format:TextFormat = new TextFormat();		private var txtField2:TextField = new TextField();		private var format2:TextFormat = new TextFormat();				public var  xmlData:XMLList;		public var  obj:Object;		public var timer:Timer = new Timer(3000 ,1); // 1000ミリ秒 = １秒		/////////////		private var _Works_bg:Works_bg;		private var _logo_btn_:logo_btn;						public function ImageScene() {			// シーンタイトルを設定します。			title = "Works _ LuckyPonies Web _ Kato & Kato Design.";		}				/**		 * シーン移動時に目的地がシーンオブジェクト自身もしくは子階層だった場合に、階層が変更された直後に送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atSceneLoad():void {			_logo_btn_ = new logo_btn();			_Works_bg = new Works_bg();			_Works_bg.x = -300			_Works_bg.y = 52;			_Works_bg.alpha = 0;						//シーン固有の値をsceneinfo.dataより取得			xmlData = new XMLList( dataHolder.data );			//データ形式がXMLListなので、XMLUtilを利用して変換			obj = jp.nium.utils.XMLUtil.xmlToObject( xmlData );						addCommand(					   new AddChild(manager.root.container, _Works_bg),					   new LoadURL( new URLRequest("xml/works_xml/"+obj._year+"XML/scene"+obj._year+"data.xml" ) ),                     					  function():void {                      //trace( this.previous.data );					  var myxml:XML = XML(this.latestData);					  nodeNum = myxml.child("scene").length();					  //trace(nodeNum);					  }							);		}				/**		 * シーンオブジェクト自身が目的地だった場合に、到達した瞬間に送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atSceneInit():void {												//画像をボタンとして作成（画像クリックで戻る様にする為）、また、ボタンはスプライトに内包する			_btn_Image = new Btn_Image_Sprite();						_close_btn = new close_btn();			_next_Btn = new next_btn();			_prev_Btn = new prev_btn();									//parentで親シーンのインスタンスを参照出来る			//_btn_Image.sceneId = parent.sceneId;			_close_btn.sceneId = parent.sceneId;			/*_btn_Image.load_X = _X;			_btn_Image.load_Y = _Y;			_btn_Image.load_Width = _Width;			_btn_Image.load_Height = _Height;*/			_btn_Image.imageUrl = obj.imageUrl;						if(obj._list+1 <= nodeNum)			{				Next_Num = obj._list+1;							} else if (obj._list+1 > nodeNum){				Next_Num = 1;				}							if(obj._list-1 >= 1)			{				Prev_Num = obj._list-1;							} else if (obj._list-1 < 1){				Prev_Num = nodeNum;				}		   //var _parent_sceneId:SceneId = new SceneId("/index/works/Scene"+obj._year);		   var Next_sId:SceneId = new SceneId("/index/works/Scene"+obj._year+"/"+obj._year+"image"+Next_Num+"_Scene" );		   var Prev_sId:SceneId = new SceneId("/index/works/Scene"+obj._year+"/"+obj._year+"image"+ Prev_Num+"_Scene");		   //var Prev_sId:SceneId = new SceneId("/index/Scene_"+obj._year+"/artist"+obj._list+"_Scene/image"+ Prev_Num);		   //trace("今は"+this.sceneId);		   		   //_next_Btn.sceneId = Next_sId; 		   //_prev_Btn.sceneId = Prev_sId;										addCommand(				// 任意のコマンドを記述してください。				new DoTweener( _Works_bg , {  alpha:0.5, x:_logo_btn_.width , time:.2 , transition:"easeOutCirc" } ),				[new AddChild(_Works_bg , _btn_Image),				new AddChild(_Works_bg , _close_btn),				new AddChild(_Works_bg , _next_Btn),				new AddChild(_Works_bg , _prev_Btn),				new Prop(_close_btn, { x:600, y:0, alpha:1 }),				new Prop(_next_Btn, { x:520-_next_Btn.width, y:445, alpha:1,sceneId: Next_sId} ),				new Prop(_prev_Btn, { x:450-_prev_Btn.width, y:445, alpha:1, sceneId:Prev_sId } )]															);						/////////////////テキスト			format.font = "_ゴシック";		// フォント名            format.size = 10;		// 文字のポイントサイズ            format.color = 0xffffff;// 文字の色 			txtField.wordWrap = true;			txtField.multiline = true;			txtField.defaultTextFormat = format;			txtField.text = obj._txt  ;			txtField.width = _Works_bg.width;									// ビットマップデータの作成            var bmpData:BitmapData = new BitmapData(txtField.textWidth+10, txtField.textHeight+10, true, 0x00ffffff);		    // キャプる            bmpData.draw(txtField);            // ペースト            var bmp:DisplayObject = _Works_bg.addChild(new Bitmap(bmpData));			bmp.x = 0;			bmp.y = 450;			bmp.alpha = 2;			//bmp.y = _Y+_Height+Prev_Btn.height/4;						//////////分数			format2.font = "Trebuchet MS";		// フォント名            format2.size = 35;		// 文字のポイントサイズ            format2.color = 0xffffff;// 文字の色 			txtField2.wordWrap = true;			txtField2.multiline = true;			txtField2.defaultTextFormat = format2;			txtField2.text = obj._list+ "/"+ nodeNum ;			txtField2.width = _Works_bg.width;									// ビットマップデータの作成            var bmpData2:BitmapData = new BitmapData(txtField2.textWidth+10, txtField2.textHeight+10, true, 0x00ffffff);		    // キャプる            bmpData2.draw(txtField2);            // ペースト            var bmp2:DisplayObject = _Works_bg.addChild(new Bitmap(bmpData2));			bmp2.x = 600-bmp2.width;			bmp2.y = 450;			bmp2.alpha = 1;					}				/**		 * シーンオブジェクト自身が出発地だった場合に、移動を開始した瞬間に送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atSceneGoto():void {			addCommand(					   [new DoTweener( _Works_bg , {  alpha:0 ,x:300 , time:.2 , transition:"easeOutCirc" } ) ],					   new RemoveChild(container,_Works_bg)			);		}				/**		 * シーン移動時に目的地がシーンオブジェクト自身もしくは親階層だった場合に、階層が変更される直前に送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atSceneUnload():void {			timer.stop();			addCommand(				// 任意のコマンドを記述してください。				new RemoveChild(container, _btn_Image),				//new RemoveChild(_btn_Image, _btn_Close),				new RemoveAllChildren(_btn_Image),				removeAllScenes			);		}	}}