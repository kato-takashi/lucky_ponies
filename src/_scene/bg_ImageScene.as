package _scene{	import jp.progression.casts.*;	import jp.progression.commands.display.*;	import jp.progression.commands.lists.*;	import jp.progression.commands.managers.*;	import jp.progression.commands.media.*;	import jp.progression.commands.net.*;	import jp.progression.commands.tweens.*;	import jp.progression.commands.*;	import jp.progression.data.*;	import jp.progression.events.*;	import jp.progression.executors.*;	import jp.progression.scenes.*;	import jp.progression.data.*;	import ui.*;	import flash.net.URLRequest;	import jp.nium.utils.XMLUtil;	import flash.text.*;	import flash.display.*;	import _sprite.*;		import flash.utils.Timer;    import flash.events.TimerEvent;		/**	 * ...	 * @author ...	 */	public class bg_ImageScene extends SceneObject {				/**		 * 新しい IndexScene インスタンスを作成します。		 */		private var _btn_Image:bg_Image_Sprite;		//private var _btn_Close:Btn_Close;		//private var Next_Btn:_Next_Btn;		//private var Prev_Btn:_Prev_Btn;		private var _X:uint;		private var _Y:uint;		private var _Width:uint;		private var _Height:uint;		private var Next_Num:uint;		private var Prev_Num:uint;		private var nodeNum:uint;		private var txtField:TextField = new TextField();		private var format:TextFormat = new TextFormat();		public var  xmlData:XMLList;		public var  obj:Object;		public var timer:Timer = new Timer(3000 ,1); // 1000ミリ秒 = １秒				public function bg_ImageScene() {			// シーンタイトルを設定します。			title = "pct _ LuckyPonies Web _ Kato & Kato Design.";		}				/**		 * シーン移動時に目的地がシーンオブジェクト自身もしくは子階層だった場合に、階層が変更された直後に送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atSceneLoad():void {			//シーン固有の値をsceneinfo.dataより取得			xmlData = new XMLList( dataHolder.data );			//データ形式がXMLListなので、XMLUtilを利用して変換			obj = jp.nium.utils.XMLUtil.xmlToObject( xmlData );						addCommand(					   					   new LoadURL( new URLRequest("xml/bg_pct01.xml" ) ),                     					  function():void {                      //trace( this.previous.data );					  var myxml:XML = XML(this.latestData);					  nodeNum = myxml.child("scene").length();					  //trace(nodeNum);					  }							);		}				/**		 * シーンオブジェクト自身が目的地だった場合に、到達した瞬間に送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atSceneInit():void {			_X = 0;			_Y = 10;						_Width = 600;			_Height = 400;															//画像をボタンとして作成（画像クリックで戻る様にする為）、また、ボタンはスプライトに内包する			_btn_Image = new bg_Image_Sprite();			//setterへ値をセットする			//_btn_Close = new Btn_Close();			//Next_Btn = new _Next_Btn();			//Prev_Btn = new _Prev_Btn();									//parentで親シーンのインスタンスを参照出来る			//_btn_Image.sceneId = parent.sceneId;			//_btn_Close.sceneId = parent.sceneId;			_btn_Image.load_X = _X;			_btn_Image.load_Y = _Y;			_btn_Image.load_Width = _Width;			_btn_Image.load_Height = _Height;			_btn_Image.imageUrl = obj.imageUrl;									if(obj._No+1 <= nodeNum)			{				Next_Num = obj._No+1;			} else if (obj._No+1 > nodeNum){				Next_Num = 1;				}							if(obj._No-1 >= 1)			{				Prev_Num = obj._No-1;							} else if (obj._No-1 < 1){				Prev_Num = nodeNum;				}													addCommand(				// 任意のコマンドを記述してください。				new AddChild(container, _btn_Image)															);		   var Next_sId:SceneId = new SceneId("/index/bg_image"+ Next_Num);		   var Prev_sId:SceneId = new SceneId("/index/bg_image"+ Prev_Num);		   //var Prev_sId:SceneId = new SceneId("/index/Scene_"+obj._year+"/artist"+obj._list+"_Scene/image"+ Prev_Num);		   			/*/////////////////テキスト			format.font = "_ゴシック";		// フォント名            format.size = 10;		// 文字のポイントサイズ            format.color = 0x000000;// 文字の色 			txtField.wordWrap = true;			txtField.multiline = true;			txtField.defaultTextFormat = format;			txtField.text = obj._No + obj._txt  ;			txtField.width = _Width;						// ビットマップデータの作成            var bmpData:BitmapData = new BitmapData(txtField.textWidth+10, txtField.textHeight+10);		    // キャプる            bmpData.draw(txtField);            // ペースト            var bmp:DisplayObject = _btn_Image.addChild(new Bitmap(bmpData));			bmp.x = _X;			//bmp.y = _Y+_Height+Prev_Btn.height/4;						///////////////////////////*/						            timer.addEventListener(TimerEvent.TIMER, timerFunc);            timer.addEventListener(TimerEvent.TIMER_COMPLETE, timerCompFunc);            timer.start();            function timerFunc(Event){            trace("予定する繰り返し回数："+timer.repeatCount);           trace("現在の繰り返し回数　："+timer.currentCount);		    //manager.goto( Next_sId );			//trace(this.sceneId);            }           function timerCompFunc(Event){           //trace("タイマーが完了");           }		   		   		   //trace("今は"+this.sceneId);		}				/**		 * シーンオブジェクト自身が出発地だった場合に、移動を開始した瞬間に送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atSceneGoto():void {			addCommand(			);		}				/**		 * シーン移動時に目的地がシーンオブジェクト自身もしくは親階層だった場合に、階層が変更される直前に送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atSceneUnload():void {			timer.stop();			addCommand(				// 任意のコマンドを記述してください。				new RemoveChild(container, _btn_Image),				//new RemoveChild(_btn_Image, _btn_Close),				new RemoveAllChildren(_btn_Image),				removeAllScenes			);		}	}}