package ui{	import jp.progression.casts.*;	import jp.progression.commands.display.*;	import jp.progression.commands.lists.*;	import jp.progression.commands.managers.*;	import jp.progression.commands.media.*;	import jp.progression.commands.net.*;	import jp.progression.commands.tweens.*;	import jp.progression.commands.*;	import jp.progression.data.*;	import jp.progression.events.*;	import jp.progression.scenes.*;	import jp.progression.loader.*;	import flash.net.URLRequest;	import _sprite.*;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.DisplayObject;	import flash.net.URLRequest; 	import jp.progression.commands.lists.LoaderList;	import jp.progression.commands.net.LoadBitmapData;		/**	 * ...	 * @author ...	 */	public class Btn_Thumbnail extends CastButton {				/**		 * 新しい MyCastButton インスタンスを作成します。		 */		public function Btn_Thumbnail( initObject:Object = null ) {			// 親クラスを初期化します。			super( initObject );						if (initObject.thumb != null) {				//CastImageLoaderインスタンスを作成				new LoaderList(	                          {		                      onComplete : function ():void {			                  trace("complete", this.latestData, this.data);						      var i:uint = 0;			                  for each (var bd:BitmapData in this.data) {				              var display:DisplayObject = addChild(new Bitmap(bd));				              //display.x =  100;				              //display.y = i * 10;							  display.width = 100;							  display.height = 70;				              //i++;							  //display.scaleX = 0.2;							  //display.scaleY = 0.2;							  			                  }		                      },		       onProgress : function ():void  {			                  trace( this.percent, "%", this.loaded, "/", this.total, this.bytesLoaded, this.bytesTotal );		                      },		       onStart : function ():void {			                  trace("start");		                      }	                          },	                          new LoadBitmapData(new URLRequest(initObject.thumb))).execute();						                      }			//trace(initObject.imageUrl);		}										/**		 * IExecutable オブジェクトが AddChild コマンド、または AddChildAt コマンド経由で表示リストに追加された場合に送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atCastAdded():void {		}				/**		 * IExecutable オブジェクトが RemoveChild コマンド、または RemoveAllChild コマンド経由で表示リストから削除された場合に送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atCastRemoved():void {		}				/**		 * Flash Player ウィンドウの CastButton インスタンスの上でユーザーがポインティングデバイスのボタンを押すと送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atCastMouseDown():void {		}				/**		 * ユーザーが CastButton インスタンスからポインティングデバイスを離したときに送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atCastMouseUp():void {		}				/**		 * ユーザーが CastButton インスタンスにポインティングデバイスを合わせたときに送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atCastRollOver():void {			addCommand(				// 任意のコマンドを記述してください。				new DoTweener(this,{alpha:0.5,time:0.2})			);		}				/**		 * ユーザーが CastButton インスタンスからポインティングデバイスを離したときに送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atCastRollOut():void {			addCommand(				// 任意のコマンドを記述してください。				new DoTweener(this,{alpha:1,time:0.2})			);		}	}}