package ui.bg{	import jp.progression.casts.*;	import jp.progression.commands.display.*;	import jp.progression.commands.lists.*;	import jp.progression.commands.managers.*;	import jp.progression.commands.media.*;	import jp.progression.commands.net.*;	import jp.progression.commands.tweens.*;	import jp.progression.commands.*;	import jp.progression.data.*;	import jp.progression.events.*;	import jp.progression.scenes.*;		import ui.*;	import ui.bg.*;	import ui.Scroll_bar.*	import ui.works.*;		import flash.net.*;	import flash.display.*;	import flash.text.*;		/**	 * ...	 * @author ...	 */	public class Works_txt extends CastSprite {				/**		 * 新しい MyCastSprite インスタンスを作成します。		 */		private var txtSquare:Sprite;		private var txtField:TextField;		private var base:Sprite;		private var masker :Masker;		private var scrollBar:Scrollbar;				 ////////btn 		 private var _btn2009:btn2009;		 private var _btn2010:btn2010;		 private var _btn2011:btn2011;		 private var _btn2012:btn2012;		 private var _year_emp:year_emp;				public function Works_txt( initObject:Object = null ) {			// 親クラスを初期化します。			super( initObject );		}				/**		 * IExecutable オブジェクトが AddChild コマンド、または AddChildAt コマンド経由で表示リストに追加された場合に送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atCastAdded():void {			var dataString:String;			var contentString:String;			var _imageUrl:String;			var nodeNum:uint;			var bmpDataList:Array;									addCommand(					   new LoadURL( new URLRequest( "xml/WorksTxt.xml" ) ),                      ////////////////				      ////////////////HTML用				      					  function():void {                      //trace( this.previous.data );					  var myxml:XML = XML(this.latestData);					  					  base = new Sprite ();					  //base.graphics.beginFill(0xFF0000, 1.0);					  base.graphics.drawRect(0, 0, 500, 0);					  base.x=10;					  base.y=80					  					  addChild(base);					  					  txtSquare = new Sprite ();					  txtSquare.graphics.drawRect(0, 0, 500, 0);					  txtSquare.x=10;					  //txtSquare.y=80;					  base.addChild(txtSquare);					  					  					  					  //XMLノード数取得					  nodeNum = myxml.child("scene").length();                      					  for (var i:uint=0; i< nodeNum; i++){					  txtField = new TextField();					  bmpDataList = new Array();					  /////////////////テキストフォーマット					  var format:TextFormat = new TextFormat();					  format.font = "_ゴシック";		// フォント名                      format.size = 10;		// 文字のポイントサイズ                      format.color = 0x000000;// 文字の色					  					  					  /////////一行目強調					  if (i>0){						  format.color = 0xffffff;						  };			          txtField.wordWrap = true;					  txtField.multiline = true;					  txtField.defaultTextFormat = format;					  					  /////////////////					  					  dataString = myxml.scene.data[i];					  contentString = myxml.scene.content[i];					  _imageUrl = myxml.scene.imageUrl[i];					  //txtField.text = myxml.scene.content[2] ;					  txtField.text = dataString +"\r"+ contentString ;					  					  //txtField.text = "test";					  					 txtField.width = txtSquare.width; 					 txtField.height = 400;					 //txtField.x = 200;			         //txtField.y = 15*i;										 			 //////////////					// ビットマップデータの作成                     var bmpData:BitmapData = new BitmapData(txtField.textWidth+10, txtField.textHeight+10,true, 0x00ffffff);					                      // キャプる                     bmpData.draw(txtField);                     // ペースト                     var bmp:DisplayObject = txtSquare.addChild(new Bitmap(bmpData));					bmp.x = 0;					bmp.y = 30*i;					bmpDataList.push(bmpData);															//////////					}										////////////btn					_btn2009 = new btn2009();					_btn2010 = new btn2010();					_btn2011 = new btn2011();					_btn2012 = new btn2012();					_year_emp = new year_emp();										_btn2009.y = 100;					_btn2010.y = _btn2009.y + _btn2010.height-1;					_btn2011.y = _btn2010.y + _btn2011.height-1;					_btn2012.y = _btn2011.y + _btn2012.height-1;										txtSquare.addChild((_btn2009));					txtSquare.addChild((_btn2010));					txtSquare.addChild((_btn2011));					txtSquare.addChild((_btn2012));										////////////mask					masker = new Masker();					//masker.x = txtSquare2.x;					masker.y = base.y;										masker.width = txtSquare.width;					masker.height = 400;				    addChild(masker);					scrollBar=new Scrollbar(txtSquare,masker);					scrollBar.x =  txtSquare.x;										//scrollBar.y = 100;										addChild(scrollBar);													   }					  							);		}				/**		 * IExecutable オブジェクトが RemoveChild コマンド、または RemoveAllChild コマンド経由で表示リストから削除された場合に送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atCastRemoved():void {			removeChild(base);			removeChild(scrollBar);		}	}}