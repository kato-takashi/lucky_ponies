package ui.Scroll_bar{	import caurina.transitions.*;	import flash.display.*;	import flash.events.*;	//********************************************************************************************//	//Scrollbar	//********************************************************************************************//	public class Scrollbar extends MovieClip {		//public var contents:Object = parent["contents"];		//public var masker:Object = parent["masker"];		//public var contents:Contents = new Contents();		//public var masker:Masker = new Masker();		public var contents:Object;		public var masker:Object;		//		public var yOffset:Number;		public var yMin:Number;		public var yMax:Number;		public var thumbHeight:Number;		public var plusminus:Number;		public var scrollPar:Number = 1/3;		public var contentsY:Number;		//============================================================================================//		//Constructor		//============================================================================================//		//public function Scrollbar() {		public function Scrollbar(_contents:Object, _masker:Object) {			contents = _contents;			masker = _masker;			addEventListener(Event.ADDED_TO_STAGE, init);			contents.mask = masker;		}		public function init(event:Event):void {			flexible();			start();		}		public function flexible() {			// Flexible スクロールの配置			this.buttonMode = true;			//this.x = masker.x + masker.width + (this.width + this.width/2);			this.x = masker.x + masker.width + (this.width );			this.y = masker.y;			track.y = up.height;			track.height = masker.height - (up.height + down.height);			thumb.height = track.height * (masker.height / contents.height) - (thumb_top.height + thumb_bottom.height);			thumb_top.y = thumb.y - thumb_top.height;			thumb_bottom.y = thumb.y + thumb.height;			down.y = track.y + track.height;			thumbHeight = thumb_top.height + thumb.height + thumb_bottom.height;			//trace(thumbHeight);			//yMin = up.height + thumb_top.height;			//yMax = up.height + thumb_top.height + track.height - thumbHeight;			yMin = up.height;			yMax = up.height + track.height - thumbHeight;			//trace( "yMax:"+yMax, "yMin:"+yMin);			if ( (yMax - yMin) > 0 ) {				if (thumb.y + thumb.height > track.y + track.height) {					contentsY = ((thumb.y + (thumbHeight * 1) * scrollPar));					common();				}				this.visible = true;			} else {				Tweener.removeTweens(thumb);				Tweener.removeTweens(contents);				thumb.y = up.height + thumb_top.height;				contents.y = 0;				this.visible = false;			}		}		function format() {			Tweener.removeTweens(thumb);			Tweener.removeTweens(contents);			contents.y = contentsY = yMin = yMax = 0;			thumb.y = up.height + thumb_top.height;		}		function start():void {			//up button			up.addEventListener(MouseEvent.MOUSE_DOWN, updownHandler);			up.addEventListener(MouseEvent.MOUSE_UP, updownClearHandler);			up.addEventListener(Event.REMOVED_FROM_STAGE, removed);			//down button			down.addEventListener(MouseEvent.MOUSE_DOWN, updownHandler);			down.addEventListener(MouseEvent.MOUSE_UP, updownClearHandler);			down.addEventListener(Event.REMOVED_FROM_STAGE, removed);			//scroll button			thumb.addEventListener(MouseEvent.MOUSE_DOWN, thumbDown);			//scroll back			track.addEventListener(MouseEvent.MOUSE_DOWN, trackDown);			//			stage.addEventListener(MouseEvent.MOUSE_UP, thumbUp);			stage.addEventListener(MouseEvent.MOUSE_UP, trackUp);			stage.addEventListener(MouseEvent.MOUSE_OUT, updownClearHandler);			stage.addEventListener(MouseEvent.MOUSE_WHEEL, mouseWheel);			stage.addEventListener(Event.REMOVED_FROM_STAGE, removed);			//			stage.addEventListener(Event.ENTER_FRAME, enterFrameHandler);		}		function enterFrameHandler(evt:Event):void {			flexible();		}		function thumbDown(evt:MouseEvent):void {			Tweener.removeTweens(thumb);			Tweener.removeTweens(contents);			stage.addEventListener(MouseEvent.MOUSE_MOVE, thumbMove);			yOffset = mouseY - thumb.y;		}		function trackDown(evt:MouseEvent):void {			Tweener.removeTweens(thumb);			Tweener.removeTweens(contents);			stage.addEventListener(Event.ENTER_FRAME, enterframeTrack);			yOffset = mouseY - thumb.y;		}		function trackUp(evt:MouseEvent):void {			stage.removeEventListener(Event.ENTER_FRAME, enterframeTrack);		}		function thumbUp(evt:MouseEvent):void {			stage.removeEventListener(MouseEvent.MOUSE_MOVE, thumbMove);		}		function thumbMove(evt:MouseEvent):void {			thumb.y = mouseY - yOffset;			if ( thumb.y <= yMin ) {				thumb.y = yMin;			}			if ( thumb.y >= yMax ) {				thumb.y = yMax;			}			var scrollper:Number = (thumb.y - yMin) / (yMax - yMin);			Tweener.addTween(contents, {y:(-scrollper * (contents.height - masker.height)), time:1, transition:"easeOutQuart"});		}		function mouseWheel(evt:MouseEvent):void {			if ( (yMax - yMin) > 0 ) {				plusminus = (evt.delta > 0) ? -1 : 1;				contentsY = ((thumb.y + (thumbHeight * plusminus) * scrollPar));				common();			}		}		function updownHandler(evt:MouseEvent):void {			plusminus = (evt.target.name == "up") ? -1 : 1;			stage.addEventListener(Event.ENTER_FRAME, enterframeArrow);		}		function updownClearHandler(evt:MouseEvent):void {			stage.removeEventListener(Event.ENTER_FRAME, enterframeArrow);		}		function enterframeTrack(evt:Event):void {			contentsY = mouseY - thumbHeight / 2;			common();		}		function enterframeArrow(evt:Event):void {			contentsY = ((thumb.y + (thumbHeight * plusminus) * scrollPar));			common();		}		function common():void {			//trace(contentsY);			if ( contentsY <= yMin ) {				contentsY = yMin;			}			if ( contentsY >= yMax ) {				contentsY = yMax;			}			//trace(contentsY, yMin, yMax);			Tweener.addTween(thumb, {y:(contentsY), time:1});			var scrollper:Number = (contentsY - yMin) / (yMax - yMin);			Tweener.addTween(contents, {y:(-scrollper * (contents.height - masker.height)), time:1});		}		///////MCがステージから消えたとき（画面遷移したとき）		function removed(evt:Event):void {			up.removeEventListener(MouseEvent.MOUSE_UP, updownClearHandler);			down.removeEventListener(MouseEvent.MOUSE_UP, updownClearHandler);			stage.removeEventListener(MouseEvent.MOUSE_OUT, updownClearHandler);			stage.removeEventListener(MouseEvent.MOUSE_UP, thumbUp);			stage.removeEventListener(MouseEvent.MOUSE_UP, trackUp);			removeEventListener(Event.REMOVED_FROM_STAGE, removed);			//stage.removeEventListener(MouseEvent.MOUSE_MOVE, thumbMove);			//stage.removeEventListener(Event.ENTER_FRAME, enterframeArrow);					}	}}