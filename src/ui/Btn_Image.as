package ui{	import jp.progression.casts.*;	import jp.progression.commands.display.*;	import jp.progression.commands.lists.*;	import jp.progression.commands.managers.*;	import jp.progression.commands.media.*;	import jp.progression.commands.net.*;	import jp.progression.commands.tweens.*;	import jp.progression.commands.*;	import jp.progression.data.*;	import jp.progression.events.*;	import jp.progression.scenes.*;	import jp.progression.loader.*;	import flash.net.URLRequest;	import _sprite.*;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.DisplayObject;	import flash.net.URLRequest; 	import jp.progression.commands.lists.LoaderList;	import jp.progression.commands.net.LoadBitmapData;		/**	 * ...	 * @author ...	 */	public class Btn_Image extends CastButton {				/**		 * 新しい MyCastButton インスタンスを作成します。		 */		 public var _Load_X:uint;		public var _Load_Y:uint;		public var _Load_Width:uint;		public var _Load_Height:uint;		//public var Mekakushi:TxtSquare;				public function Btn_Image( initObject:Object = null ) {			// 親クラスを初期化します。			super( initObject );						// 移動先となるシーン識別子を設定します。			//sceneId = new SceneId( "/index" );						// 外部リンクの場合には href プロパティに設定します。			//href = "http://progression.jp/";			if (initObject.imageUrl != null) {			new LoaderList(	                          {		                      onComplete : function ():void {			                  trace("complete", this.latestData, this.data);						      var i:uint = 0;			                  for each (var bd:BitmapData in this.data) {							    /*Mekakushi = new TxtSquare();			                    Mekakushi.width = initObject._Width+20;						        Mekakushi.height = initObject._Height+10;			                    Mekakushi.alpha = 0.8;			                  addChild( Mekakushi);*/				              var display:DisplayObject = addChild(new Bitmap(bd));				              i++;			                  display.x = 00;							  display.y = 0;							  display.width = 600;							  display.height = 450;							  display.alpha = 2;							  //display.x = Mekakushi.width/2 - display.width/2  ;				              							  							  }		                      },		       onProgress : function ():void  {			                  trace( this.percent, "%", this.loaded, "/", this.total, this.bytesLoaded, this.bytesTotal );		                      },		       onStart : function ():void {			                  trace("start");		                      }	                          },	                          new LoadBitmapData(new URLRequest(initObject.imageUrl))).execute();						                      }												/*_Load_X = initObject._X ;			_Load_Y = initObject._Y ;			_Load_Width = initObject._Width ;			_Load_Height = initObject._Height;			*/						/*Mekakushi = new TxtSquare();			Mekakushi.width = initObject._Width+20;			Mekakushi.height = initObject._Height+10;			Mekakushi.alpha = 0.8;*/																								}						/**		 * IExecutable オブジェクトが AddChild コマンド、または AddChildAt コマンド経由で表示リストに追加された場合に送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atCastAdded():void {					}				/**		 * IExecutable オブジェクトが RemoveChild コマンド、または RemoveAllChild コマンド経由で表示リストから削除された場合に送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atCastRemoved():void {		}				/**		 * Flash Player ウィンドウの CastButton インスタンスの上でユーザーがポインティングデバイスのボタンを押すと送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atCastMouseDown():void {		}				/**		 * ユーザーが CastButton インスタンスからポインティングデバイスを離したときに送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atCastMouseUp():void {		}				/**		 * ユーザーが CastButton インスタンスにポインティングデバイスを合わせたときに送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atCastRollOver():void {		}				/**		 * ユーザーが CastButton インスタンスからポインティングデバイスを離したときに送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atCastRollOut():void {		}	}}