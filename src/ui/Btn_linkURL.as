package ui{	import jp.progression.casts.*;	import jp.progression.commands.display.*;	import jp.progression.commands.lists.*;	import jp.progression.commands.managers.*;	import jp.progression.commands.media.*;	import jp.progression.commands.net.*;	import jp.progression.commands.tweens.*;	import jp.progression.commands.*;	import jp.progression.data.*;	import jp.progression.events.*;	import jp.progression.scenes.*;	import jp.progression.loader.*;	import flash.net.URLRequest;	import _sprite.*;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.DisplayObject;	import flash.net.URLRequest; 	import jp.progression.commands.lists.LoaderList;	import jp.progression.commands.net.LoadBitmapData;			import flash.text.*;	import flash.display.*;		/**	 * ...	 * @author ...	 */	public class Btn_linkURL extends CastButton {				/**		 * 新しい MyCastButton インスタンスを作成します。		 */		 private var txtField:TextField;		 private var _linkName:String;		 private var _linkURL:String;		 private var base1:Sprite;		 private var base2:Sprite;		 private var _shikaku:shikaku;		 private var pList1:ParallelList;         private var pList2:ParallelList;		 		public function Btn_linkURL( initObject:Object = null ) {			// 親クラスを初期化します。			super( initObject );			var bmpDataList = new Array();			pList1 = new ParallelList();			pList2 = new ParallelList();						txtField = new TextField();			_shikaku = new shikaku();			base1 = new Sprite ();			base1.graphics.drawRect(0, 0, 500, 0);			base1.y = 7;			base2 = new Sprite ();			base2.graphics.drawRect(0, 0, 500, 0);			base2.scaleX = 0.5;					  			addChild(base1);			addChild(base2);			base2.addChild(_shikaku);			//_shikaku.scaleX=3;			_shikaku.alpha = 0.5;			_linkName = initObject.linkName;			_linkURL = initObject.linkUrl; 						href = initObject.linkUrl;			/////////////////テキストフォーマット					  var format:TextFormat = new TextFormat();					  format.font = "_ゴシック";		// フォント名                      format.size = 10;		// 文字のポイントサイズ                      format.color = 0x000000;// 文字の色					  					  					  			          txtField.wordWrap = true;					  txtField.multiline = true;					  txtField.defaultTextFormat = format;					  txtField.width = 500;					  /////////////////					  					  					  //txtField.text = _linkName ;					  txtField.text = _linkName;					 					 					  //////////////					// ビットマップデータの作成                     var bmpData:BitmapData = new BitmapData(txtField.textWidth+10, txtField.textHeight+10,true, 0x00ffffff);					                      // キャプる                     bmpData.draw(txtField);                     // ペースト                     var bmp:DisplayObject = base1.addChild(new Bitmap(bmpData));					bmp.x = 0;					bmp.y = 0;					bmp.alpha= 1;					bmpDataList.push(bmpData);															//////////													}										/**		 * IExecutable オブジェクトが AddChild コマンド、または AddChildAt コマンド経由で表示リストに追加された場合に送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atCastAdded():void {					}				/**		 * IExecutable オブジェクトが RemoveChild コマンド、または RemoveAllChild コマンド経由で表示リストから削除された場合に送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atCastRemoved():void {		}				/**		 * Flash Player ウィンドウの CastButton インスタンスの上でユーザーがポインティングデバイスのボタンを押すと送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atCastMouseDown():void {			//trace(_linkURL);					}				/**		 * ユーザーが CastButton インスタンスからポインティングデバイスを離したときに送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atCastMouseUp():void {		}				/**		 * ユーザーが CastButton インスタンスにポインティングデバイスを合わせたときに送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atCastRollOver():void {			pList1.addCommand(				// 任意のコマンドを記述してください。				//new AddChild(base2,_shikaku),								new DoTweener(base2,{scaleX:2, alpha:2, time:0.5}),				new DoTweener(base1,{scaleX:1.05, scaleY:1.05, alpha:1.5,time:0.5})			);			insertCommand(pList1);		}				/**		 * ユーザーが CastButton インスタンスからポインティングデバイスを離したときに送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atCastRollOut():void {			pList2.addCommand(				// 任意のコマンドを記述してください。				new DoTweener(base2,{scaleX:0.5,alpha:1,time:0.5}),								new DoTweener(base1,{scaleX:1, scaleY:1,alpha:1,time:0.5})				//new RemoveChild(base2,_shikaku)							);			insertCommand(pList2);		}	}}