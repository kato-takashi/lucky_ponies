package _sprite{	import jp.progression.casts.*;	import jp.progression.commands.display.*;	import jp.progression.commands.lists.*;	import jp.progression.commands.managers.*;	import jp.progression.commands.media.*;	import jp.progression.commands.net.*;	import jp.progression.commands.tweens.*;	import jp.progression.commands.*;	import jp.progression.data.*;	import jp.progression.events.*;	import jp.progression.scenes.*;	import ui.*;		import jp.progression.casts.effects.*;	import fl.transitions.easing.*;		import fl.transitions.*;		/**	 * ...	 * @author ...	 */	public class Btn_Image_Sprite extends CastSprite {				/**		 * 新しい MyCastSprite インスタンスを作成します。		 */		private var _imageUrl:String;		private var _sceneId:SceneId;		private var _obj:Object;		private var _button:Btn_Image;		private var _load_X:uint;		private var _load_Y:uint;		private var _load_Width:uint;		private var _load_Height:uint;				public function Btn_Image_Sprite( initObject:Object = null ) {			// 親クラスを初期化します。			super( initObject );		}				public function set sceneId(value:SceneId):void 		{			//シーンIDはsetterで取得			_sceneId = value;					}					public function set imageUrl(value:String):void 		{			_imageUrl = value;		}				public function set load_X(value:uint):void 		{			_load_X = value;					}				public function set load_Y(value:uint):void 		{			_load_Y = value;					}				public function set load_Width(value:uint):void 		{			_load_Width = value;					}				public function set load_Height(value:uint):void 		{			_load_Height = value;					}		/**		 * IExecutable オブジェクトが AddChild コマンド、または AddChildAt コマンド経由で表示リストに追加された場合に送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atCastAdded():void {			//ボタンの作成			_button = new Btn_Image( { imageUrl:_imageUrl, _X:_load_X, _Y:_load_Y, _Width:_load_Width, _Height:_load_Height } );			//シーンIDの設定			_button.sceneId = _sceneId;												//自身にボタンを追加し、追加時の動作を設定			addCommand(				// 任意のコマンドを記述してください。				new Prop(this, { x:00, alpha:0 } ),				new AddChild(this, _button),				new DoTweener(this, { alpha:1, time:1 } )				//,new DoTransition(this, Blinds , Transition.IN, 2, None.easeNone, 10, 0)			);		}				/**		 * IExecutable オブジェクトが RemoveChild コマンド、または RemoveAllChild コマンド経由で表示リストから削除された場合に送出されます。		 * このイベント処理の実行中には、ExecutorObject を使用した非同期処理が行えます。		 */		override protected function atCastRemoved():void {			//ボタン削除時の動作を設定			addCommand(				// 任意のコマンドを記述してください。				new DoTweener(this, {  alpha:0, time:0.5} ),				new RemoveChild(this, _button)							);		}	}}